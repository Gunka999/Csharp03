1) Create a void delegate Print()
2) Create two methods that will use this delegate:

TranslateMonthName(): for translating name of month;
PrintSeasonName(): for showing name of season;

Then user should enter following data:

a) User should choose number within 1-12. 
b) Create a delegate variable and assign it based on user preference:
   What information he/she wants to know: translated name of month or season name. 
   (use switch statements or expressions)
   
    Based on user choice you should call appropriate method. You're not gonna check by if-else and call them, 
    rather create a variable of delegate and assign it with necessary method. At the end just call (invoke) it.

c) Then create following method and add it to previous delegate variable:
   InfoPrint(): for showing more information about app - just print some info;

   For example:

   Select a month:
   1. January
   2. February
   etc.

   Lets say user chose 1. After..

   Select what information do you want to know?

   1. Translated name of month
   2. Name of season

   User chose 1. The result will be:

   Translated name of month will be: Yanvar;
   Information about app.

   If user chose 2, result would be:
   
   Name of season: Winter;
   Information about app.


d) Change app using lambda expressions.
e) Change app using one of the built-in delegates: Func<>, Action<>, Predicate<>.




1) Create FilterString(string word) delegate which returns bool;
2) Create string list with different words: let users enter them;
3) Create ParseWordList(List<string> words, FilterString filter) method:
it accepts a list of string as first parameter and delegate as second parameter. 
It should filter list based on delegate logic and return new filtered list.

4) Call that method. Use lambda expression for second argument: 

4.1) select words that contain 'a' letters;
4.2) select words that have more than 5 characters;
4.3) select words that doesn't contain 'B' letters;
4.4) remove all words with letter 'u' and return list;
4.5) replace all words with letter 'o' with 'NOT ACCEPTED' and return list;

Print all results;

Re-rewrite app using ObservableCollection<string> instead of List<string>; 
Print on console info about action every time collection is changed:

When you add word:
"Your word has been added: {yourWord}"

When you replace word:
"Your word has been replaced: {print old items of list and new}"

When you remove word:
"Your word has been replaced: {print old items of list and new}"

HINT:
You should subscribe a method to CollectionChanged event of ObservableCollection;


1) Create GameType enum:

Shooter,
Action,
Quest;

1.1) Create Game class with properties:
string Name
GameType Gender

2) Create GameRecorder class with:

a) EventHandler event accepting GameEventArgs as parameter;
b) OnGameRecorded() method for invoking event delegates;
d) Record(Game game) method that will imitate recording (printing "Recording...") and 
   calling OnGameRecorded method in the end, passing Game information into it;

3) Create GameEventArgs with Game property;
4) Create following services:

a) MessageService
b) MailService
c) ConsoleService

Each of them should have OnGameRecorded method having GameEventArgs as second parameter 
(first will be object sender);
Methods should just print "Printing from MessageService: information about game" and etc.

Create instance of GameRecorder class and other services.
Subscribe methods from those services to OnGameRecorded event of GameRecorder instance;
